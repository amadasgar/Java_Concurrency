Java provides a mechanism to capture and process exceptions. 
There are exceptions that must be captured or re-thrown using the throws clause of a method. These exceptions are called checked exceptions. 
There are exceptions that don't have to be specified or caught. These are unchecked exceptions:
1.	Checked exceptions: These must be specified in the throws clause of a method or caught inside them, for example, IOException or ClassNotFoundException.
2.	Unchecked exceptions: These don't need to be specified or caught, for example, NumberFormatException.

When a checked exception is thrown inside the run() method of a thread object, we have to catch and treat them because the run() 
method doesn't accept a throws clause. When an unchecked exception is thrown inside the run() method of a thread object, 
the default behavior is to write the stack trace in the console and exit the program.

Fortunately, Java provides us with a mechanism to catch and treat unchecked exceptions thrown in a thread object to avoid ending the 
program.

*************************************************************************************************************************************
When an exception is thrown in a thread and remains uncaught (it has to be an unchecked exception), 
the JVM checks whether the thread has an uncaught exception handler set by the corresponding method. 
If it does, the JVM invokes this method with the Thread object and Exception as arguments.

If the thread doesn't have an uncaught exception handler, the JVM prints the stack trace in the console and ends the execution of the thread that had thrown the exception.